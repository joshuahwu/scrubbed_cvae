Timer unit: 1e-09 s

Total time: 159.365 s
File: /mnt/home/jwu10/working/ssumo/src/ssumo/train/trainer.py
Function: train_test_epoch at line 103

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   103                                           @profile
   104                                           def train_test_epoch(
   105                                               config,
   106                                               model,
   107                                               loader,
   108                                               device,
   109                                               epoch,
   110                                               optimizer=None,
   111                                               scheduler=None,
   112                                               mode="train",
   113                                               get_z=False,
   114                                           ):
   115                                           
   116         5       2949.0    589.8      0.0      if mode == "train":
   117         5    1972181.0 394436.2      0.0          model.train()
   118         5       3771.0    754.2      0.0          grad_env = torch.enable_grad
   119                                               elif mode == "test":
   120                                                   model.eval()
   121                                                   grad_env = torch.no_grad
   122                                               else:
   123                                                   raise ValueError("This mode is not recognized.")
   124         5      32433.0   6486.6      0.0      with grad_env():
   125         5       1429.0    285.8      0.0          z = []
   126         5      19295.0   3859.0      0.0          model.mi_estimator = None
   127         5      23807.0   4761.4      0.0          epoch_metrics = {k: 0 for k in ["total"] + list(config["loss"].keys())}
   128       240 8087685076.0    3e+07      5.1          for batch_idx, data in enumerate(loader):
   129                                                       # with profile(activities = [ProfilerActivity.CPU, ProfilerActivity.CUDA], record_shapes=True) as prof:
   130                                                       #     with record_function("model_inference"):
   131       235  877608897.0    4e+06      0.6              data = {k: v.to(device) for k, v in data.items()}
   132                                                       # if model.conditional_dim > 0:
   133                                                       #     data["var"] = [
   134                                                       #         (
   135                                                       #             F.one_hot(data[k].ravel().long(), len(model.discrete_classes[k]))
   136                                                       #             if k in model.discrete_classes.keys()
   137                                                       #             else data[k]
   138                                                       #         )
   139                                                       #         for k in model.conditional_keys
   140                                                       #     ]
   141                                                       #     data["var"] = torch.cat(data["var"], dim=-1)
   142                                           
   143       235 5137276133.0    2e+07      3.2              data_o = predict_batch(model, data, model.disentangle_keys)
   144                                           
   145       235     191969.0    816.9      0.0              if mode == "Train":
   146                                                           if bool(model.disentangle):
   147                                                               for method in model.disentangle.keys():
   148                                                                   if method == "adversarial_net":
   149                                                                       for k in model.disentangle[method].keys():
   150                                                                           model.disentangle[method][k].fit(
   151                                                                               data_o["mu"].detach(),
   152                                                                               data_o["var"].clone(),
   153                                                                               model.disentangle_keys.index(k),
   154                                                                               None,
   155                                                                               config["disentangle"]["n_iter"],
   156                                                                           )
   157                                           
   158       235      70916.0    301.8      0.0              if get_z:
   159        47        3e+10    6e+08     17.9                  z += [data_o["mu"].clone().detach().cpu()]
   160                                           
   161                                                       # print(config["loss"])
   162       470   71723836.0 152603.9      0.0              batch_loss = get_batch_loss(
   163       235      81657.0    347.5      0.0                  model,
   164       235      56145.0    238.9      0.0                  data,
   165       235      54506.0    231.9      0.0                  data_o,
   166       235     222665.0    947.5      0.0                  config["loss"],
   167       235     103904.0    442.1      0.0                  config["disentangle"],
   168                                                       )
   169                                                       # print(batch_loss)
   170                                                       # import pdb; pdb.set_trace()
   171                                           
   172                                                       # if "mcmi" in config["loss"]:
   173                                                       #     var = torch.cat(
   174                                                       #         [data[k] for k in model.disentangle_keys], dim=-1
   175                                                       #     )
   176                                                       #     if batch_idx > 0:
   177                                                       #         batch_loss["mcmi"] = mi_estimator(data_o["mu"], var)
   178                                                       #         batch_loss["total"] += (
   179                                                       #             config["loss"]["mcmi"] * batch_loss["mcmi"]
   180                                                       #         )
   181                                                       #     else:
   182                                                       #         batch_loss["mcmi"] = 0
   183                                                       # if ("mcmi" in config["loss"].keys()) or (
   184                                                       #     "adversarial_net" in model.disentangle.keys()
   185                                                       # ):
   186                                                       #     var = torch.cat([data[k] for k in model.disentangle_keys], dim=-1)
   187                                           
   188       235     150824.0    641.8      0.0              if mode == "train":
   189     14100   84265833.0   5976.3      0.1                  for param in model.parameters():
   190     13865   12504118.0    901.8      0.0                      param.grad = None
   191                                           
   192       235        1e+11    5e+08     72.6                  batch_loss["total"].backward()
   193       235  292865955.0    1e+06      0.2                  torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1e7)
   194       235  499515197.0    2e+06      0.3                  optimizer.step()
   195       235     131783.0    560.8      0.0                  if scheduler is not None:
   196                                                               scheduler.step(epoch + batch_idx / len(loader))
   197                                           
   198       235    2295311.0   9767.3      0.0                  if bool(model.disentangle):
   199                                                               for method in model.disentangle.keys():
   200                                                                   if method in ["moving_avg_lsq", "moving_avg", "qda"]:
   201                                                                       for k in model.disentangle[method].keys():
   202                                                                           model.disentangle[method][k].update(
   203                                                                               data_o["mu"].detach().clone(),
   204                                                                               data[k].detach().clone(),
   205                                                                           )
   206                                                                   # elif method == "adversarial_net":
   207                                                                   #     for k in model.disentangle[method].keys():
   208                                                                   #         model.disentangle[method][k].fit(
   209                                                                   #             data_o["mu"].detach(),
   210                                                                   #             data_o["var"].clone(),
   211                                                                   #             model.disentangle_keys.index(k),
   212                                                                   #             None,
   213                                                                   #             config["disentangle"]["n_iter"],
   214                                                                   #         )
   215                                           
   216       470    5986706.0  12737.7      0.0              epoch_metrics = {
   217       235     201466.0    857.3      0.0                  k: v + batch_loss[k].detach() for k, v in epoch_metrics.items()
   218                                                       }
   219                                           
   220       235     409346.0   1741.9      0.0              if "mcmi" in config["loss"].keys():
   221                                                           updated_data_o = model.encode(data)
   222                                           
   223                                                           model.mi_estimator = MutInfoEstimator(
   224                                                               x_s=updated_data_o["mu"].detach().clone(),
   225                                                               y_s=data_o["var"].clone(),
   226                                                               bandwidth=config["disentangle"]["bandwidth"],
   227                                                               var_mode=config["disentangle"]["var_mode"],
   228                                                               model_var=(
   229                                                                   updated_data_o["L"].detach().clone()
   230                                                                   if "L" in updated_data_o.keys()
   231                                                                   else None
   232                                                               ),
   233                                                               device=device,
   234                                                           )
   235                                           
   236                                                       # import pdb; pdb.set_trace()
   237                                           
   238        15      72971.0   4864.7      0.0          for k, v in epoch_metrics.items():
   239        10     726064.0  72606.4      0.0              epoch_metrics[k] = v.item() / len(loader)
   240        20    1759150.0  87957.5      0.0              print(
   241        20      50428.0   2521.4      0.0                  "====> Epoch: {} Average {} loss: {:.4f}".format(
   242        10       4096.0    409.6      0.0                      epoch, k, epoch_metrics[k]
   243                                                           )
   244                                                       )
   245                                           
   246         5       2491.0    498.2      0.0      if get_z:
   247         1    4040906.0    4e+06      0.0          return epoch_metrics, torch.cat(z, dim=0)
   248                                               else:
   249         4       1308.0    327.0      0.0          return epoch_metrics, 0

Total time: 159.427 s
File: /mnt/home/jwu10/working/ssumo/src/ssumo/train/trainer.py
Function: train at line 360

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   360                                           @profile
   361                                           def train(config, model, train_loader, test_loader, run=None):
   362         1      24571.0  24571.0      0.0      torch.set_float32_matmul_precision("medium")
   363                                               # torch.autograd.set_detect_anomaly(True)
   364         1      34083.0  34083.0      0.0      torch.backends.cudnn.benchmark = True
   365                                               # config = balance_disentangle(config, train_loader.dataset)
   366                                           
   367         2     986781.0 493390.5      0.0      optimizer, scheduler = get_optimizer_and_lr_scheduler(
   368         1       1034.0   1034.0      0.0          model,
   369         1       1156.0   1156.0      0.0          config["train"],
   370         1       2227.0   2227.0      0.0          config["model"]["load_model"],
   371         1        392.0    392.0      0.0          config["model"]["start_epoch"],
   372                                               )
   373                                           
   374         1       4716.0   4716.0      0.0      if "prior" in config["loss"].keys():
   375         2      58060.0  29030.0      0.0          beta_scheduler = get_beta_schedule(
   376         1        297.0    297.0      0.0              config["loss"]["prior"],
   377         1       1102.0   1102.0      0.0              config["train"]["beta_anneal"],
   378                                                   )
   379                                               else:
   380                                                   beta_scheduler = None
   381                                           
   382         7    3056522.0 436646.0      0.0      for epoch in tqdm.trange(
   383         1        851.0    851.0      0.0          config["model"]["start_epoch"] + 1, config["train"]["num_epochs"] + 1
   384                                               ):
   385         5       2059.0    411.8      0.0          if beta_scheduler is not None:
   386                                                       config["loss"]["prior"] = beta_scheduler.get(epoch)
   387                                                       print("Beta schedule: {:.3f}".format(config["loss"]["prior"]))
   388                                           
   389         5       2775.0    555.0      0.0          starttime = time.time()
   390        10        2e+11    2e+10    100.0          train_metrics, z_train = train_epoch(
   391         5       1046.0    209.2      0.0              config=config,
   392         5       1014.0    202.8      0.0              model=model,
   393         5        900.0    180.0      0.0              loader=train_loader,
   394         5        896.0    179.2      0.0              optimizer=optimizer,
   395         5        891.0    178.2      0.0              scheduler=scheduler,
   396         5       1175.0    235.0      0.0              device="cuda",
   397         5        915.0    183.0      0.0              epoch=epoch,
   398                                                   )
   399         5      33158.0   6631.6      0.0          metrics = {"{}_train".format(k): v for k, v in train_metrics.items()}
   400                                           
   401         5      60892.0  12178.4      0.0          if "grad_reversal" in model.disentangle.keys():
   402                                                       for key in model.disentangle["grad_reversal"].keys():
   403                                                           model.disentangle["grad_reversal"][key].reset_parameters()
   404                                           
   405         5      13130.0   2626.0      0.0          if "moving_avg_lsq" in model.disentangle.keys():
   406                                                       for key in model.disentangle["moving_avg_lsq"].keys():
   407                                                           metrics["lambda_mals_{}".format(key)] = (
   408                                                               model.disentangle["moving_avg_lsq"][key].lam1.detach().cpu().numpy()
   409                                                           )
   410                                           
   411         5      10959.0   2191.8      0.0          if "qda" in model.disentangle.keys():
   412                                                       for key in model.disentangle["qda"].keys():
   413                                                           metrics["lambda_qda_{}".format(key)] = (
   414                                                               model.disentangle["qda"][key].lama.detach().cpu().numpy()
   415                                                           )
   416                                           
   417         5       7108.0   1421.6      0.0          metrics["time"] = time.time() - starttime
   418                                           
   419         5       3511.0    702.2      0.0          if epoch % 5 == 0:
   420         1        772.0    772.0      0.0              if epoch >= 50:
   421                                                           # rand_state = torch.random.get_rng_state()
   422                                                           # print(rand_state)
   423                                                           # torch.manual_seed(100)
   424                                                           test_metrics, z_test = test_epoch(
   425                                                               config=config,
   426                                                               model=model,
   427                                                               loader=test_loader,
   428                                                               device="cuda",
   429                                                               epoch=epoch,
   430                                                           )
   431                                                           metrics.update(
   432                                                               {"{}_test".format(k): v for k, v in test_metrics.items()}
   433                                                           )
   434                                           
   435                                                           for key in ["avg_speed_3d", "heading"]:
   436                                                               y_true = test_loader.dataset[:][key].detach().cpu().numpy()
   437                                                               r2_lin = linear_rand_cv(
   438                                                                   z_test,
   439                                                                   y_true,
   440                                                                   int(np.ceil(model.window / config["data"]["stride"])),
   441                                                                   5,
   442                                                               )
   443                                                               r2_mlp = mlp_rand_cv(
   444                                                                   z_test,
   445                                                                   y_true,
   446                                                                   int(np.ceil(model.window / config["data"]["stride"])),
   447                                                                   5,
   448                                                               )
   449                                                               metrics["r2_{}_lin_mean".format(key)] = np.mean(r2_lin)
   450                                                               metrics["r2_{}_lin_std".format(key)] = np.std(r2_lin)
   451                                                               metrics["r2_{}_mlp_mean".format(key)] = np.mean(r2_mlp)
   452                                                               metrics["r2_{}_mlp_std".format(key)] = np.std(r2_mlp)
   453                                           
   454                                                           z_scaled = StandardScaler().fit_transform(z_train)
   455                                                           y_true = (
   456                                                               train_loader.dataset[:]["ids"].detach().cpu().numpy().astype(np.int)
   457                                                           )
   458                                                           acc_log = log_class_rand_cv(
   459                                                               z_scaled,
   460                                                               y_true,
   461                                                               int(np.ceil(model.window / config["data"]["stride"])),
   462                                                               5,
   463                                                           )
   464                                                           acc_qda = qda_rand_cv(
   465                                                               z_scaled,
   466                                                               y_true,
   467                                                               int(np.ceil(model.window / config["data"]["stride"])),
   468                                                               5,
   469                                                           )
   470                                                           metrics["acc_ids_log_mean"] = np.mean(acc_log)
   471                                                           metrics["acc_ids_log_std"] = np.std(acc_log)
   472                                                           metrics["acc_ids_qda_mean"] = np.mean(acc_qda)
   473                                                           metrics["acc_ids_qda_std"] = np.std(acc_qda)
   474                                           
   475                                                           k_pred_e = cluster.gmm(
   476                                                               latents=z_test,
   477                                                               n_components=50,
   478                                                               label="".format(epoch),
   479                                                               covariance_type="diag" if config["model"]["diag"] else "full",
   480                                                               path=None,
   481                                                           )[0]
   482                                           
   483                                                           walking_inds = np.in1d(
   484                                                               test_loader.dataset.gmm_pred["midfwd_test"],
   485                                                               test_loader.dataset.walking_clusters["midfwd_test"],
   486                                                           )
   487                                                           metrics["entropy_midfwd_test"] = shannon_entropy(k_pred_e[walking_inds])
   488                                           
   489                                                           for cluster_key in test_loader.dataset.gmm_pred.keys():
   490                                                               mapped = hungarian_match(
   491                                                                   k_pred_e, test_loader.dataset.gmm_pred[cluster_key]
   492                                                               )
   493                                                               metrics["mof_gmm_{}".format(cluster_key)] = (
   494                                                                   (test_loader.dataset.gmm_pred[cluster_key] == mapped)
   495                                                               ).sum() / len(k_pred_e)
   496                                           
   497                                                       # metrics.update({"{}_test".format(k):v for k,v in test_loss.items()})
   498                                                       # run = wandb.Api().run("joshuahwu/wandb_test/{}".format(wandb_run.))
   499                                                       # wandb_run.run.history().to_csv("metrics.csv")
   500                                           
   501         1     168310.0 168310.0      0.0              print("Saving model to folder: {}".format(config["out_path"]))
   502         2   44151474.0    2e+07      0.0              torch.save(
   503         1    3088736.0    3e+06      0.0                  {k: v.cpu() for k, v in model.state_dict().items()},
   504         1       3158.0   3158.0      0.0                  "{}/weights/epoch_{}.pth".format(config["out_path"], epoch),
   505                                                       )
   506                                           
   507         1       1554.0   1554.0      0.0              if epoch % 20 == 0:
   508                                                           torch.save(
   509                                                               {"optimizer": optimizer.state_dict(), "lr_scheduler": scheduler},
   510                                                               "{}/checkpoints/epoch_{}.pth".format(config["out_path"], epoch),
   511                                                           )
   512                                           
   513         5    1764501.0 352900.2      0.0          wandb.log(metrics, epoch)
   514                                           
   515         1        448.0    448.0      0.0      return model

159.36 seconds - /mnt/home/jwu10/working/ssumo/src/ssumo/train/trainer.py:103 - train_test_epoch
159.43 seconds - /mnt/home/jwu10/working/ssumo/src/ssumo/train/trainer.py:360 - train
